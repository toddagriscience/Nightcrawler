# ToddAgriScience Website - Claude Context

## Project Overview

A modern, production-ready Next.js website for Todd Agriscience with comprehensive development infrastructure, smooth user experience, and complete SEO optimization. Successfully migrated from the original website while maintaining exact design fidelity and adding enhanced performance features.

## Tech Stack

### Core Framework
- **Next.js 15** with App Router & Turbopack
- **TypeScript** with strict type checking
- **Tailwind CSS v4** with custom brand configuration
- **React 19** with modern hooks and patterns

### Animation & UX
- **Framer Motion** for component animations
- **Lenis** for buttery smooth scrolling (matching original feel)
- **Custom cursor** with hover interactions
- **Dynamic header** with scroll-based state changes

### Development Infrastructure
- **Jest + React Testing Library** (unit testing)
- **Playwright** (E2E testing)
- **Storybook 8** with accessibility addon
- **ESLint + Prettier** with pre-commit hooks (Husky)
- **GitHub Actions** CI/CD pipeline

### SEO & Performance
- **Comprehensive metadata** (OpenGraph, Twitter cards, structured data)
- **Custom fonts** (next/font/local with Neue Haas Unica, Utah WGL)
- **Optimized assets** (favicons, social images, robots.txt)
- **Type-safe metadata utilities** for dynamic pages

## Directory Structure

```
src/
  app/                    # Pages and API routes only
    [locale]/            # Internationalized pages
    api/                 # API routes
    globals.css          # Global styles
    layout.tsx           # Root layout
  components/             # All React components
  context/               # React contexts
  hooks/                 # Custom hooks
  lib/                   # Utility functions
  types/                 # TypeScript type definitions
  svgs/                  # SVG components
public/                  # Static assets
  fonts/                 # Custom fonts
  publications/          # PDF documents
scripts/                 # Build and utility scripts
docs/                    # Documentation
i18n/                    # Internationalization config
slices/                  # Prismic slices
e2e/                     # End-to-end tests
.github/workflows/       # CI/CD pipelines
.storybook/             # Storybook configuration
```

### Future Enhancements (Optional)
- [ ] **Analytics setup** - Google Analytics, GTM, Hotjar (IDs available)
- [ ] **Authentication system** - NextAuth integration (when needed)
- [ ] **CMS integration** - Prismic or other headless CMS (when needed)
- [ ] **Additional pages** - Content migration from original site

## Key Pages to Migrate

- Home page
- About/Who we are
- What we do
- News & Events
- Contact
- Investors section
- Governance pages
- Careers
- Accessibility
- Terms & Privacy


### File Organization

- **Co-located files**: Test files (`.test.tsx`) and Storybook files (`.stories.tsx`) should live alongside their components
- **Component structure**: Each component should have its own directory with:
  - `component.tsx` - Main component
  - `component.test.tsx` - Unit tests
  - `component.stories.tsx` - Storybook stories 
  - separately:
    - `index.ts` - located in the parent directory as a Barrel export
- **Import paths**: Use `@/` alias for src imports (configured in tsconfig and Jest)

### Available Scripts

- `npm run dev` - Development server with Turbopack
- `npm run build` - Production build
- `npm run test` - Run Jest unit tests
- `npm run test:watch` - Jest in watch mode
- `npm run test:coverage` - Jest with coverage report
- `npm run test:e2e` - Playwright E2E tests
- `npm run test:e2e:ui` - Playwright with UI mode
- `npm run lint` - ESLint checking
- `npm run lint:fix` - ESLint with auto-fix
- `npm run type-check` - TypeScript validation
- `npm run format` - Prettier formatting
- `npm run storybook` - Storybook development server
- `npm run build-storybook` - Build Storybook static files

### CI/CD Pipeline

- **Triggers**: Every push to any branch, PRs to dev/main
- **Workflow**: lint → type-check → unit tests → E2E tests → build
- **Deployment**:
  - Feature branches get Vercel preview deployments
  - `dev` branch deployment for staging
  - `main` branch deployment for production
- **Quality gates**: All tests must pass before deployment

### Pre-commit Hooks

- Automatically runs lint and format on staged files
- Type-checking runs on commit
- Prevents commits if linting/type errors exist

## Important Notes

- Keep the same visual design as the original website
- Focus on scalability and maintainability
- Use TypeScript throughout
- Follow Next.js App Router best practices
- Write tests alongside components (co-located)
- Use Storybook for component documentation
- All code must pass lint/type checks before commit
- Before making changes, ask questions to get full context of the user
- Before migrating & making changes, list out multiple ways to do so, from the efficient to least. If the original implementation is best, state that.
