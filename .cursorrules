# ToddAgriScience Website - Claude Context

## Project Overview

A modern, production-ready Next.js website for Todd Agriscience with comprehensive development infrastructure, smooth user experience, and complete SEO optimization. Successfully migrated from the original website while maintaining exact design fidelity and adding enhanced performance features.

## Tech Stack

### Core Framework
- **Next.js 15** with App Router & Turbopack
- **TypeScript** with strict type checking
- **Tailwind CSS v4** with custom brand configuration
- **React 19** with modern hooks and patterns

### Internationalization
- **Multi-language support** (en, de, es, fr, it, ja, pt)
- **Smart locale detection** from browser settings and localStorage
- **Type-safe translations** with parameter interpolation
- **Fallback system** to English for missing translations

### Animation & UX
- **Framer Motion** for component animations and scroll-based effects
- **Lenis** for buttery smooth scrolling (matching original feel)
- **Custom cursor** with hover interactions
- **Dynamic header** with scroll-based state changes
- **Advanced theme system** with smooth transitions and scroll-based dark mode
- **Centralized theme context** with debounced state management

### Development Infrastructure
- **Jest + React Testing Library** (unit testing)
- **Playwright** (E2E testing)
- **Storybook 8** with accessibility addon
- **ESLint + Prettier** with pre-commit hooks (Husky)
- **GitHub Actions** CI/CD pipeline

### SEO & Performance
- **Comprehensive metadata** (OpenGraph, Twitter cards, structured data)
- **Custom fonts** (next/font/local with Neue Haas Unica, Utah WGL)
- **Optimized assets** (favicons, social images, robots.txt)
- **Type-safe metadata utilities** for dynamic pages

## Directory Structure

```
src/
  app/                    # Pages and API routes only
    [locale]/            # Internationalized pages (future)
    api/                 # API routes
    globals.css          # Global styles with Lenis setup
    layout.tsx           # Root layout with providers
    not-found.tsx        # Custom 404 page
  components/             # All React components
    common/              # Reusable components (Button, etc.)
    landing/             # Homepage-specific components
      hero/              # Hero section component
      news-highlight-card/ # Combined news + quote card
      quote/             # Quote/About section
      scroll-shrink-wrapper/ # Scroll animation wrapper
    ui/                  # UI components (Header, Footer, etc.)
      header/            # Navigation header
      footer/            # Site footer
      locale-switcher/   # Language selection component
      common/            # Common UI utilities (Cursor)
  context/               # React contexts
    LocaleContext.tsx    # Internationalization context
    ThemeContext.tsx     # Theme and dark mode context
  lib/                   # Utility functions
    i18n/                # Internationalization config
      config.ts          # Locale configuration
      messages/          # Translation JSON files
      request.ts         # Server-side i18n utilities
    theme.ts             # Centralized theme system
  test/                  # Testing utilities
    test-utils.tsx       # React Testing Library setup
public/                  # Static assets
  fonts/                 # Custom fonts (Neue Haas, Utah WGL)
  publications/          # PDF documents
  images/                # Static images
scripts/                 # Build and utility scripts
e2e/                     # End-to-end tests
.github/workflows/       # CI/CD pipelines
.storybook/             # Storybook configuration
  decorators/            # Custom Storybook decorators
```

### Future Enhancements (Optional)
- [ ] **Analytics setup** - Google Analytics, GTM, Hotjar (IDs available)
- [ ] **Authentication system** - NextAuth integration (when needed)
- [ ] **CMS integration** - Prismic or other headless CMS (when needed)
- [ ] **Additional pages** - Content migration from original site

## Key Pages to Migrate

- Home page
- About/Who we are
- What we do
- News & Events
- Contact
- Investors section
- Governance pages
- Careers
- Accessibility
- Terms & Privacy


### File Organization

- **Co-located files**: Test files (`.test.tsx`) and Storybook files (`.stories.tsx`) should live alongside their components
- **Component structure**: Each component should have its own directory with:
  - `component.tsx` - Main component
  - `component.test.tsx` - Unit tests
  - `component.stories.tsx` - Storybook stories 
  - separately:
    - `index.ts` - located in the parent directory as a Barrel export
- **Import paths**: Use `@/` alias for src imports (configured in tsconfig and Jest)

### Available Scripts

- `npm run dev` - Development server with Turbopack
- `npm run build` - Production build
- `npm run test` - Run Jest unit tests
- `npm run test:watch` - Jest in watch mode
- `npm run test:coverage` - Jest with coverage report
- `npm run test:e2e` - Playwright E2E tests
- `npm run test:e2e:ui` - Playwright with UI mode
- `npm run lint` - ESLint checking
- `npm run lint:fix` - ESLint with auto-fix
- `npm run type-check` - TypeScript validation
- `npm run format` - Prettier formatting
- `npm run storybook` - Storybook development server
- `npm run build-storybook` - Build Storybook static files

### CI/CD Pipeline

- **Triggers**: Every push to any branch, PRs to dev/main
- **Workflow**: lint → type-check → unit tests → E2E tests → build
- **Deployment**:
  - Feature branches get Vercel preview deployments
  - `dev` branch deployment for staging
  - `main` branch deployment for production
- **Quality gates**: All tests must pass before deployment

### Pre-commit Hooks

- Automatically runs lint and format on staged files
- Type-checking runs on commit
- Prevents commits if linting/type errors exist

## Architecture Patterns

### Theme Management
- **Context-based theme system** with `ThemeContext`
- **Smooth transitions** with 300ms debounced state changes
- **Scroll-based dark mode** detection with performance optimization
- **Centralized theme tokens** in `lib/theme.ts` with TypeScript support
- **CSS custom properties** generation for runtime theme switching

### Component Patterns
- **Flexible prop/context pattern**: Components accept `isDark` prop OR use theme context
- **Compound components**: `NewsHighlightCard` contains both news and quote sections
- **Motion animations**: Framer Motion for smooth color transitions and scroll effects
- **Barrel exports**: Each component directory has `index.ts` for clean imports

### State Management
- **Scroll detection**: Optimized with `requestAnimationFrame` throttling
- **Theme transitions**: Debounced to prevent rapid state changes
- **Locale management**: Persistent in localStorage with browser fallback

## Important Notes

- **Design fidelity**: Keep the same visual design as the original website
- **Performance first**: Use optimized scroll listeners and smooth transitions
- **Type safety**: Comprehensive TypeScript throughout with strict checking
- **Accessibility**: Proper ARIA roles, semantic HTML, and keyboard navigation
- **Internationalization**: Full i18n support with fallback handling
- **Testing**: Write tests alongside components (co-located)
- **Documentation**: Use Storybook for component documentation
- **Code quality**: All code must pass lint/type checks before commit
- **Context first**: Ask questions to get full context before making changes
- **Multiple approaches**: List implementation options from most to least efficient
